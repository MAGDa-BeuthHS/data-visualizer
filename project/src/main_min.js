/**
 * Created by Minh Hoang DANG on 30/05/2017.
 */
if(!Detector.webgl)Detector.addGetWebGLMessage();init();animate();function init(){var container=document.getElementById('container');document.body.appendChild(container);WebGLRenderer=new THREE.CanvasRenderer({alpha:!0});WebGLRenderer.setClearColor(0xf0f0f0);WebGLRenderer.setPixelRatio(window.devicePixelRatio);WebGLRenderer.setSize(window.innerWidth,window.innerHeight);WebGLRenderer.domElement.style.top=0;WebGLRenderer.domElement.style.zIndex=1;container.appendChild(WebGLRenderer.domElement);cssRenderer=new THREE.CSS3DRenderer();cssRenderer.setSize(window.innerWidth,window.innerHeight);cssRenderer.domElement.style.position='absolute';cssRenderer.domElement.style.top=0;cssRenderer.domElement.style.margin=0;cssRenderer.domElement.style.padding=0;container.appendChild(cssRenderer.domElement);WebGLScene.add(baseOXYGridHelper);WebGLScene.add(baseOYZGridHelper);WebGLScene.add(baseOXZGridHelper);labelOrigin=makeTextSprite("O");labelOrigin.position.copy(LABEL_ORIGIN_SPAWN);WebGLScene.add(labelOrigin);labelT=makeTextSprite("Time");labelT.position.copy(LABEL_TIME_SPAWN);WebGLScene.add(labelT);labelLng=makeTextSprite("Lng");labelLng.position.copy(LABEL_LNG_SPAWN);WebGLScene.add(labelLng);labelLat=makeTextSprite("Lat");labelLat.position.copy(LABEL_LAT_SPAWN);WebGLScene.add(labelLat);textureGeoLoader=new THREE.TextureLoader();var textureGeo=textureGeoLoader.load('./data/nyc_location_map_raster.png');textureGeo.minFilter=THREE.LinearFilter;mapMat=new THREE.MeshPhongMaterial({map:textureGeo});mapMat.needsUpdate=!0;textureGeo.wrapS=THREE.RepeatWrapping;textureGeo.wrapT=THREE.RepeatWrapping;var mapGeo=new THREE.PlaneGeometry(size,size);mapMesh=new THREE.Mesh(mapGeo,mapMat);mapMesh.rotation.x=-(Math.PI/2);mapMesh.position.x=baseOXYGridHelper.position.x;mapMesh.position.z=baseOXYGridHelper.position.z;mapMesh.position.y=baseOXYGridHelper.position.y-0.5;mapMesh.scale.x=(sizeX/size);mapMesh.scale.y=(sizeZ/size);mapMesh.renderOrder=0;mapMesh.visible=!1;WebGLScene.add(mapMesh);mapLayer=createCSS3DObject(OSMFrame.replace("MAPTYPE",maptype).replace("LOCATION",loc).replace("ZOOM",10));mapLayer.rotation.copy(mapMesh.rotation);mapLayer.position.copy(mapMesh.position);mapLayer.position.z=baseOXYGridHelper.position.z+10;mapLayer.position.x=baseOXYGridHelper.position.x-10;mapLayer.position.y=baseOXYGridHelper.position.y-25;var percentBorder=0.05;mapLayer.scale.x=0.46;mapLayer.scale.y=0.46;mapLayer.renderOrder=0;cssScene.add(mapLayer);for(var entry of processedData){var cunit=new CUnit(size/step,entry['cell_x'],entry['cell_y'],entry['time_step'],entry['zscore'],entry['pvalue']);CUnitCluster.add(cunit);WebGLScene.add(cunit.getMesh())}
    var ambientLight=new THREE.AmbientLight(0xffffff,0.2);WebGLScene.add(ambientLight);stats=new Stats();container.appendChild(stats.dom);camera=new THREE.CombinedCamera(window.innerWidth/2,window.innerHeight/2,90,1,1000,-500,1000);camera.isPerspectiveCamera=!0;camera.isOrthographicCamera=!1;camera.position.copy(CAMERA_SPAWN);camera.lookAt(new THREE.Vector3(size/2,size/2,size/2));controls=new THREE.OrbitControls(camera,cssRenderer.domElement);controls.addEventListener('change',render);controls.enableZoom=!0;document.addEventListener('mousemove',onDocumentMouseMove,!1);document.addEventListener('contextmenu',onDocumentLMB,!1);document.addEventListener('mouseup',onDocumentMouseReset,!1);document.addEventListener('wheel',onDocumentMouseWheel,!1);window.addEventListener('resize',onWindowResize,!1);THREEx.WindowResize(cssRenderer,camera);THREEx.WindowResize(WebGLRenderer,camera)}
function animate(){requestAnimationFrame(animate);update();render()}
function update(){raycaster.setFromCamera(mouse,camera);var intersects=raycaster.intersectObjects(WebGLScene.children);if(intersects.length>0){if(INTERSECTED!=intersects[0].object&&intersects[0].object.material.emissive!=null){if(INTERSECTED)INTERSECTED.material.emissive.setHex(INTERSECTED.currentHex);INTERSECTED=intersects[0].object;INTERSECTED.currentHex=INTERSECTED.material.emissive.getHex();INTERSECTED.material.emissive.setHex(0xf0f0f0);if(intersects[0].object.name)
    document.getElementById("cunit_info").innerHTML=`Information: ${intersects[0].object.name}`}}else{if(INTERSECTED)INTERSECTED.material.emissive.setHex(INTERSECTED.currentHex);INTERSECTED=null}
    controls.update();stats.update()}
function render(){cssRenderer.render(cssScene,camera);WebGLRenderer.render(WebGLScene,camera)}