/**
 * Created by Minh Hoang DANG on 30/05/2017.
 */
function makeTextSprite(message,parameters)
{if(parameters===undefined)parameters={};var fontface=parameters.hasOwnProperty("fontface")?parameters.fontface:"Consolas";var fontsize=parameters.hasOwnProperty("fontsize")?parameters.fontsize:size*0.25;var borderThickness=parameters.hasOwnProperty("borderThickness")?parameters.borderThickness:4;var borderColor=parameters.hasOwnProperty("borderColor")?parameters.borderColor:{r:0,g:0,b:0,a:0};var backgroundColor=parameters.hasOwnProperty("backgroundColor")?parameters.backgroundColor:{r:255,g:255,b:255,a:0};var canvas=document.createElement('canvas');var context=canvas.getContext('2d');context.font=fontsize+"px "+fontface;var metrics=context.measureText(message);var textWidth=metrics.width;context.fillStyle="rgba("+backgroundColor.r+","+backgroundColor.g+","+backgroundColor.b+","+backgroundColor.a+")";context.strokeStyle="rgba("+borderColor.r+","+borderColor.g+","+borderColor.b+","+borderColor.a+")";context.lineWidth=borderThickness;roundRect(context,borderThickness/2,borderThickness/2,textWidth+borderThickness,fontsize*1.4+borderThickness,6);context.fillStyle="rgba(0, 0, 0, 1.0)";context.fillText(message,borderThickness,fontsize+borderThickness);var texture=new THREE.Texture(canvas);texture.minFilter=THREE.LinearFilter;texture.needsUpdate=!0;var spriteMaterial=new THREE.SpriteMaterial({map:texture,depthWrite:!0});var sprite=new THREE.Sprite(spriteMaterial);sprite.scale.set(50,25,1.0);return sprite}
function roundRect(ctx,x,y,w,h,r)
{ctx.beginPath();ctx.moveTo(x+r,y);ctx.lineTo(x+w-r,y);ctx.quadraticCurveTo(x+w,y,x+w,y+r);ctx.lineTo(x+w,y+h-r);ctx.quadraticCurveTo(x+w,y+h,x+w-r,y+h);ctx.lineTo(x+r,y+h);ctx.quadraticCurveTo(x,y+h,x,y+h-r);ctx.lineTo(x,y+r);ctx.quadraticCurveTo(x,y,x+r,y);ctx.closePath();ctx.fill();ctx.stroke()}
function webglAvailable(){try{var canvas=document.createElement('canvas');return!!(window.WebGLRenderingContext&&(canvas.getContext('webgl')||canvas.getContext('experimental-webgl')))}catch(e){return!1}}
function setOrthographic(){resetLabel();camera.toOrthographic();camera.setZoom(7);zoomAmount=7;document.getElementById('fov').innerHTML='Orthographic mode'}
function setPerspective(){resetLabel();camera.toPerspective();camera.setZoom(1);zoomAmount=1;camera.position.copy(CAMERA_SPAWN);document.getElementById('fov').innerHTML='Perspective mode'}
function switchFrontCamera(){resetLabel();camera.position.x=Math.cos(2*Math.PI)*size;camera.position.z=Math.sin(2*Math.PI)*size;camera.position.y=0;camera.lookAt(WebGLScene.position);camera.updateProjectionMatrix();document.getElementById('fov').innerHTML='Orthographic mode: Longitude/Timestep';labelLat.visible=!1}
function switchBackCamera(){resetLabel();camera.position.x=Math.cos(Math.PI)*size;camera.position.z=Math.sin(Math.PI)*size;camera.position.y=0;camera.lookAt(WebGlScene.position);camera.updateProjectionMatrix();labelLat.visible=!1;document.getElementById('fov').innerHTML='Orthographic mode: Longitude / Timestep'}
function switchLeftCamera(){resetLabel();camera.position.x=Math.cos(1.5*Math.PI)*size;camera.position.z=Math.sin(1.5*Math.PI)*size;camera.position.y=0;camera.lookAt(WebGlScene.position);camera.updateProjectionMatrix();labelLng.visible=!1;labelOrigin.position.x-=35;document.getElementById('fov').innerHTML='Orthographic mode: Latitude / Timestep'}
function switchRightCamera(){resetLabel();camera.position.x=Math.cos(Math.PI/2)*size;camera.position.z=Math.sin(Math.PI/2)*size;camera.position.y=0;camera.lookAt(WebGlScene.position);camera.updateProjectionMatrix();labelLng.visible=!1;labelOrigin.position.x+=20;document.getElementById('fov').innerHTML='Orthographic mode: Latitude / Timestep'}
function switchTopCamera(){resetLabel();camera.position.x=0;camera.position.z=Math.sin(2*Math.PI)*size;camera.position.y=Math.cos(2*Math.PI)*size;camera.lookAt(WebGLScene.position);camera.updateProjectionMatrix();labelT.visible=!1;labelLng.position.z+=10;labelLng.position.x-=30;labelLat.position.x-=50;labelOrigin.position.x-=30;document.getElementById('fov').innerHTML='Orthographic mode: Longitude / Latitude';updateMapScaleXFilter(0.34);updateMapScaleYFilter(0.33);updateMapOffsetX(2);updateMapOffsetZ(-1)}
function switchBottomCamera(){resetLabel();camera.position.x=0;camera.position.z=Math.sin(Math.PI)*size;camera.position.y=Math.cos(Math.PI)*size;camera.lookAt(WebGlScene.position);camera.updateProjectionMatrix();labelT.visible=!1;labelLng.position.z+=20;document.getElementById('fov').innerHTML='Orthographic mode: Latitude / Longitude'}
function resetLabel(){labelLat.visible=!0;labelLat.position.copy(LABEL_LAT_SPAWN);labelOrigin.visible=!0;labelOrigin.position.copy(LABEL_ORIGIN_SPAWN);labelT.visible=!0;labelT.position.copy(LABEL_TIME_SPAWN);labelLng.visible=!0;labelLng.position.copy(LABEL_LNG_SPAWN)}
function resetScene(){CUnitCluster.traverse(function(child){if(child instanceof CUnit)
    child.reinitiate()})}
function createCSS3DObject(s){var div=document.createElement('div');div.innerHTML=s;div.style.opacity=0.7;var object=new THREE.CSS3DObject(div);return object}
function createSides(s,geometry){for(var iFace=0;iFace<geometry.faces.length;iFace+=2){var side=createCSS3DObject(s);var face=geometry.faces[iFace];var faceNext=geometry.faces[iFace+1];var centroid=new THREE.Vector3();centroid.copy(geometry.vertices[face.a]).add(geometry.vertices[face.b]).add(geometry.vertices[face.c]).add(geometry.vertices[faceNext.a]).add(geometry.vertices[faceNext.b]).add(geometry.vertices[faceNext.c]).divideScalar(6);side.position.x=centroid.x;side.position.y=centroid.y;side.position.z=centroid.z;var up=new THREE.Vector3(0,0,1);var normal=geometry.faces[iFace].normal;var axis=new THREE.Vector3();axis.crossVectors(up,normal);var angle=Math.atan2(axis.length(),up.dot(normal));axis.normalize();var matrix4=new THREE.Matrix4();matrix4.makeRotationAxis(axis,angle);side.rotation.setFromRotationMatrix(matrix4);cssScene.add(side);sides.push(side)}}
function calcLatitude(cell_y){return LAT_MIN+(cell_y*0.2)/111.321}
function calcLongitude(cell_x,latitude){return LNG_MIN+(cell_x*0.2)/(Math.cos(latitude)*111.321)}